# This module defines the macro compute_platform_str
cmake_minimum_required(VERSION 2.8.7)

# check the version of the compiler
macro(compute_platform_str varname)
    set(${varname} "${varname}-NOTFOUND")

    if( ${CMAKE_SIZEOF_VOID_P} EQUAL 4 )
        set(X64 OFF)
    else()
        set(X64 ON)
    endif()

    if(MSVC)
        # Windows platforms
        math(EXPR msvc_normalized_version "(${MSVC_VERSION} - 600) / 10" )
        if(X64)
            set(${varname} vc${msvc_normalized_version}_x64)
        else()
            set(${varname} vc${msvc_normalized_version})
        endif()
    else()
        set(compiler "compiler-NOTFOUND")
        set(compiler_version_major "compiler_version_major-NOTFOUND")
        set(compiler_version_minor "compiler_version_minor-NOTFOUND")
        set(compiler_version_patch "compiler_version_patch-NOTFOUND")

        if( ${CMAKE_CXX_COMPILER_ID} STREQUAL "GNU" )
            set(compiler "gcc")
        elseif( ${CMAKE_CXX_COMPILER_ID} STREQUAL "Clang" )
            set(compiler "clang")
        endif()

        if( ${CMAKE_CXX_COMPILER_ID} STREQUAL "GNU" OR ${CMAKE_CXX_COMPILER_ID} STREQUAL "Clang" )
            string(REGEX REPLACE "^([0-9]+).*$" "\\1" compiler_version_major ${CMAKE_CXX_COMPILER_VERSION})
            string(REGEX REPLACE "^([0-9]+)\\.([0-9]+).*$" "\\2" compiler_version_minor ${CMAKE_CXX_COMPILER_VERSION})
            string(REGEX REPLACE "^([0-9]+)\\.([0-9]+)\\.([0-9]+)$" "\\3" compiler_version_patch ${CMAKE_CXX_COMPILER_VERSION})
        endif()

        if(APPLE)
            if(IOS)
                set(${varname} ${IOS_PLATFORM}_${IOS_VERSION_MAJOR}${IOS_VERSION_MINOR})
                string(TOLOWER "${${varname}}" ${varname})
            elseif(X64)
                set(${varname} mac_${compiler}${compiler_version_major}${compiler_version_minor}_x64)
            endif()
        elseif(UNIX AND X64)
            set(${varname} lin_${compiler}${compiler_version_major}${compiler_version_minor}_x64)
        endif()
    endif()
endmacro()

# Compute and print the detected platform
set(platform "platform-NOTFOUND")
compute_platform_str(platform)
if(platform)
    message("Computed platform: ${platform}")
else()
    message(SEND_ERROR "Unable to detect a supported platform")
endif()
