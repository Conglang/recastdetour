# This module defines the macro compute_platform_str
cmake_minimum_required(VERSION 2.8.7)

# check the version of the compiler
macro(compute_platform_str varname)
    set(${varname} "${varname}-NOTFOUND")
    if(IOS)
        set(${varname} ${IOS_PLATFORM}_${IOS_VERSION_MAJOR}${IOS_VERSION_MINOR})
        string(TOLOWER "${${varname}}" ${varname})
    else()
        if(MSVC)
            math(EXPR msvc_normalized_version "(${MSVC_VERSION} - 600) / 10" )
            set(${varname} vc${msvc_normalized_version})
        elseif(UNIX)
            if(APPLE)
                set(${varname} mac)
            else()
                set(${varname} lin)
            endif()
            if( ${CMAKE_CXX_COMPILER_ID} STREQUAL "GNU" )
                set(${varname} ${${varname}}_gcc)
            else()
                set(${varname} ${${varname}}_${CMAKE_CXX_COMPILER_ID})
                string(TOLOWER "${${varname}}" ${varname})
            endif()

            if(CMAKE_CXX_COMPILER_VERSION)
                string(REGEX REPLACE "^([0-9]+).*$" "\\1" compiler_version_major ${CMAKE_CXX_COMPILER_VERSION})
                string(REGEX REPLACE "^([0-9]+)\\.([0-9]+).*$" "\\2" compiler_version_minor ${CMAKE_CXX_COMPILER_VERSION})
                set(${varname} ${${varname}}${compiler_version_major}${compiler_version_minor})
            endif()
        endif()
        if( ${CMAKE_SIZEOF_VOID_P} EQUAL 8 )
            # pointers are 8 bits -> 64 bits platform
            set(${varname} ${${varname}}_x64)
        endif()
    endif()
endmacro()

# Compute and print the detected platform
set(platform "platform-NOTFOUND")
compute_platform_str(platform)
if(platform)
    message("Computed platform: ${platform}")
else()
    message(SEND_ERROR "Unable to detect a supported platform")
endif()
